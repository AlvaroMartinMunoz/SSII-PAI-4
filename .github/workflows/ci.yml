name: CI + DevSecOps

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  issues: write

jobs:
  devsecops-pipeline:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

        # 2) Clone y arrancar DefectDojo
      - name: Clone DefectDojo
        run: git clone https://github.com/DefectDojo/django-DefectDojo.git defectdojo

      - name: Start DefectDojo
        working-directory: defectdojo
        run: docker compose up -d

      # 2.1) Esperar a que el initializer termine y luego al web service HTTP 200
      - name: Wait for DefectDojo to be fully up
        working-directory: defectdojo
        run: |
          echo "⏳ Waiting for initializer container to finish migrations…"
          # Esperamos a que el contenedor 'initializer' finalice con exit code 0
          until [ "$(docker compose ps -q initializer | xargs docker inspect --format='{{.State.ExitCode}}' 2>/dev/null)" = "0" ]; do
            echo "   • initializer still running or failed. Showing last logs:"
            docker compose logs initializer --tail 20
            sleep 10
          done
          echo "✅ Migrations done."

          echo "⏳ Polling HTTP until we get 200 OK…"
          # Ahora seguimos redirecciones (-L) y esperamos HTTP 200
          until [ "$(curl -s -o /dev/null -w '%{http_code}' -L http://localhost:8080/)" = "200" ]; do
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' -L http://localhost:8080/)
            echo "   • Got HTTP $STATUS, retrying in 10s…"
            sleep 10
          done
          echo "✅ DefectDojo is READY (HTTP 200)!"

      - name: Show DefectDojo logs
        run: docker compose logs --tail 50

      # 3) Preparar carpeta de reportes
      - name: Create reportes directory
        run: mkdir -p reportes

      # 4) Setup Node.js y dependencias
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm ci

      # 5) Tests unitarios
      - name: Run unit tests
        run: npm test

      # 6) SCA: npm audit → reportes/audit-report.json
      - name: Audit dependencies and fail on high vulnerabilities (SCA)
        run: |
          npm audit --json > reportes/audit-report.json || true
          if grep -q '"severity":"high"' reportes/audit-report.json; then exit 1; fi

      # 7) SAST: Semgrep
      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep and generate SARIF
        run: |
          semgrep --config "p/default" --sarif --output semgrep.sarif .
        continue-on-error: true
        env:
          SEMGREP_PR_ID: ${{ github.event.pull_request.number }}

      # 7.1) Depuración: Verificar archivos generados por Semgrep
      - name: Debug Semgrep output
        run: |
          echo "Archivos en el directorio actual:"
          ls -la
          echo "Buscando archivos SARIF:"
          find . -name "*.sarif"

      # 7.2) Mover el reporte SARIF si existe
      - name: Move Semgrep SARIF report
        run: |
          if [ -f "semgrep.sarif" ]; then
            mkdir -p reportes
            mv semgrep.sarif reportes/semgrep-report.sarif
            echo "Reporte semgrep.sarif movido a reportes/semgrep-report.sarif"
          else
            echo "No se encontró semgrep.sarif, continuando..."
          fi
        continue-on-error: true

      # 8) IaC Security: Trivy
      - name: Trivy IaC scan (Dockerfile example)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: .
          format: json
          output: reportes/trivy-report.json
        continue-on-error: true

      # 9) Levantar la app para DAST
      - name: Start the app
        run: |
          nohup npm start > app.log 2>&1 &
          sleep 15

      - name: Upload app startup logs
        uses: actions/upload-artifact@v4
        with:
          name: app-logs
          path: app.log

      # 10) DAST: OWASP ZAP Baseline
      - name: Run OWASP ZAP Baseline Scan (DAST)
        uses: zaproxy/action-baseline@v0.8.0
        with:
          target: "http://localhost:3000"
          docker_name: "zaproxy/zap-stable"
          allow_issue_writing: true
        continue-on-error: true

      - name: Move ZAP reports into reportes
        run: |
          mv report_html.html report_json.json report_md.md reportes/

      - name: Upload ZAP Report (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: reportes

      # 11) Importar reportes desde reportes/ a DefectDojo
      - name: Upload npm audit report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: http://localhost:8080
          file: reportes/audit-report.json
          scan_type: "NPM Audit"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}

      - name: Upload Semgrep SARIF report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: http://localhost:8080
          file: reportes/semgrep-report.sarif
          scan_type: "Semgrep JSON Report"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}
        continue-on-error: true

      - name: Upload Trivy JSON report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: http://localhost:8080
          file: reportes/trivy-report.json
          scan_type: "Trivy"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}

      - name: Upload ZAP JSON report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: http://localhost:8080
          file: reportes/report_json.json
          scan_type: "ZAP Baseline Scan"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}

      # 12) Priorización/clasificación automatizada de vulnerabilidades
      - name: Prioritize vulnerabilities in DefectDojo
        run: |
          curl -X POST \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "rules": [
                {"severity": "High", "priority": "P1", "status": "Active"},
                {"severity": "Medium", "priority": "P2", "status": "Active"},
                {"severity": "Low", "priority": "P3", "status": "Active"}
              ]
            }' \
            http://localhost:8080/api/v2/findings/bulk_update/
        continue-on-error: true
