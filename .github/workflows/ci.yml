name: CI + DevSecOps

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  issues: write

jobs:
  devsecops-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      # -------------------- SCA: An√°lisis de dependencias --------------------
      - name: Audit dependencies and fail on high vulnerabilities (SCA)
        run: |
          echo "Running npm audit..."
          npm audit --json > audit-report.json || true

          echo "üßæ Audit report:"
          cat audit-report.json

          echo "üîç Checking for high severity vulnerabilities..."
          if grep -q '"severity":"high"' audit-report.json; then
            echo "‚ùå High vulnerabilities found in dependencies."
            exit 1
          else
            echo "‚úÖ No high vulnerabilities found."
          fi

      # -------------------- SAST: Semgrep --------------------
      - name: Run Semgrep (SAST)
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/default"
        continue-on-error: true

      # -------------------- IAC Security --------------------
      - name: Trivy IaC scan (Dockerfile example)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: .
        continue-on-error: true

      # -------------------- Start app for DAST --------------------
      - name: Start the app
        run: |
          nohup npm start > app.log 2>&1 &
          sleep 15

      - name: Upload app startup logs
        uses: actions/upload-artifact@v4
        with:
          name: app-logs
          path: app.log

      # -------------------- DAST: OWASP ZAP --------------------
      - name: Run OWASP ZAP Baseline Scan (DAST)
        uses: zaproxy/action-baseline@v0.8.0
        with:
          target: "http://localhost:3000"
          docker_name: "zaproxy/zap-stable"
          allow_issue_writing: true
        continue-on-error: true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_html.html
            report_json.json
            report_md.md

      # -------------------- Gesti√≥n de vulnerabilidades en DefectDojo --------------------
      - name: Upload npm audit report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: audit-report.json
          scan_type: "NPM Audit"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}

      - name: Upload ZAP JSON report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTDOJO_URL }}
          file: report_json.json
          scan_type: "ZAP Baseline Scan"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}
