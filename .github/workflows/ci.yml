name: CI + DevSecOps

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  security-events: write

jobs:
  devsecops-pipeline:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      # 0) Configura Docker
      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # 1) Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Iniciar DefectDojo en puerto 8081
      - name: Start DefectDojo
        run: |
          git clone https://github.com/DefectDojo/django-DefectDojo.git defectdojo
          cd defectdojo
          sed -i 's/8080:8080/8081:8080/g' docker-compose.yml
          docker-compose up -d
          docker-compose exec -T uwsgi bash -c "while ! curl -s http://localhost:8080 >/dev/null; do sleep 5; done"

      # 3) Configura Node.js y dependencias
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      # 4) Tests unitarios
      - name: Run unit tests
        run: npm test

      # 5) SCA: npm audit
      - name: Run npm audit
        run: npm audit --json > reportes/audit-report.json || true

      - name: Check for high vulnerabilities
        run: |
          if jq '.metadata.vulnerabilities.high' reportes/audit-report.json | grep -qv '0'; then
            echo "❌ High vulnerabilities found."
            exit 1
          fi

      # 6) SAST: Semgrep
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "r/all"

      - name: Upload Semgrep report
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: "http://localhost:8081"
          file: "semgrep-report.sarif"
          scan_type: "Semgrep Scan"

      # 7) DAST: OWASP ZAP
      - name: Run ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: "http://localhost:3000"
          rules: "rules.yaml"
      - name: Upload ZAP report
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: "http://localhost:8081"
          file: "zap-report.json"
          scan_type: "OWASP ZAP Scan"

      # -------------------- IAC Security --------------------
      - name: Trivy IaC scan (Dockerfile example)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: .
        continue-on-error: true

      # 8) Subir reportes a DefectDojo
      - name: Upload reports
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: "http://localhost:8081"
          file: "reportes/audit-report.json"
          scan_type: "NPM Audit"
