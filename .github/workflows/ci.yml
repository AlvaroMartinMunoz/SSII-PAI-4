name: CI + DevSecOps

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  issues: write

jobs:
  devsecops-pipeline:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout del c√≥digo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Clone y arrancar DefectDojo
      - name: Clone DefectDojo
        run: git clone https://github.com/DefectDojo/django-DefectDojo.git defectdojo

      - name: Start DefectDojo
        working-directory: defectdojo
        run: docker compose up -d

      # üîó Exponer DefectDojo con Ngrok
      - name: Start ngrok tunnel to DefectDojo
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok -y
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok http 8080 > ngrok.log &
          sleep 10
          curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url' > ngrok-url.txt
          echo "NGROK_URL=$(cat ngrok-url.txt)" >> $GITHUB_ENV

      # 3) Preparar carpeta de reportes
      - name: Create reportes directory
        run: mkdir -p reportes

      # 4) Setup Node.js y dependencias
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm ci

      # 5) Tests unitarios
      - name: Run unit tests
        run: npm test

      # 6) SCA: npm audit ‚Üí reportes/audit-report.json
      - name: Audit dependencies and fail on high vulnerabilities (SCA)
        run: |
          npm audit --json > reportes/audit-report.json || true
          if grep -q '"severity":"high"' reportes/audit-report.json; then exit 1; fi

      - name: Debug: audit-report.json
        run: |
          echo "Contenido de audit-report.json:"
          head -n 100 reportes/audit-report.json || echo "Archivo vac√≠o o no encontrado"

      # 7) SAST: Semgrep
      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep and generate SARIF
        run: |
          semgrep --config "p/default" --sarif --output semgrep.sarif .
        continue-on-error: true

      - name: Move Semgrep SARIF report
        run: |
          if [ -f "semgrep.sarif" ]; then
            mv semgrep.sarif reportes/semgrep-report.sarif
          fi
        continue-on-error: true

      - name: Debug: semgrep-report.sarif
        run: |
          if [ -f "reportes/semgrep-report.sarif" ]; then
            echo "Primeras l√≠neas del SARIF:"
            head -n 50 reportes/semgrep-report.sarif
          else
            echo "semgrep-report.sarif no existe"
          fi

      # 8) IaC Security: Trivy
      - name: Trivy IaC scan (Dockerfile example)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          scan-ref: .
          format: json
          output: reportes/trivy-report.json
        continue-on-error: true

      - name: Debug: trivy-report.json
        run: |
          if [ -f "reportes/trivy-report.json" ]; then
            echo "Contenido parcial de trivy-report.json:"
            head -n 100 reportes/trivy-report.json
          else
            echo "trivy-report.json no existe"
          fi

      # 9) Levantar la app para DAST
      - name: Start the app
        run: |
          nohup npm start > app.log 2>&1 &
          sleep 15

      - name: Upload app startup logs
        uses: actions/upload-artifact@v4
        with:
          name: app-logs
          path: app.log

      # 10) DAST: OWASP ZAP Baseline
      - name: Run OWASP ZAP Baseline Scan (DAST)
        uses: zaproxy/action-baseline@v0.8.0
        with:
          target: "http://localhost:3000"
          docker_name: "zaproxy/zap-stable"
          allow_issue_writing: true
        continue-on-error: true
        env:
          DOCKER_OPTIONS: "--user $(id -u):$(id -g)"

      - name: Move ZAP reports into reportes
        run: |
          mv report_html.html report_json.json report_md.md reportes/

      - name: Debug: ZAP report_json.json
        run: |
          if [ -f "reportes/report_json.json" ]; then
            echo "Contenido parcial de ZAP JSON:"
            head -n 100 reportes/report_json.json
          else
            echo "ZAP JSON report no encontrado"
          fi

      - name: Upload ZAP Report (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: reportes

      # 11) Importar reportes desde reportes/ a DefectDojo (usando ngrok URL)
      - name: Upload npm audit report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: ${{ env.NGROK_URL }}
          file: reportes/audit-report.json
          scan_type: "NPM Audit"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}

      - name: Upload Semgrep SARIF report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: ${{ env.NGROK_URL }}
          file: reportes/semgrep-report.sarif
          scan_type: "Semgrep JSON Report"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}
        continue-on-error: true

      - name: Upload Trivy JSON report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: ${{ env.NGROK_URL }}
          file: reportes/trivy-report.json
          scan_type: "Trivy"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}

      - name: Upload ZAP JSON report to DefectDojo
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTDOJO_TOKEN }}
          defectdojo_url: ${{ env.NGROK_URL }}
          file: reportes/report_json.json
          scan_type: "ZAP Baseline Scan"
          engagement: ${{ secrets.DEFECTDOJO_ENGAGEMENT }}

      # 12) Priorizaci√≥n/clasificaci√≥n automatizada de vulnerabilidades
      - name: Prioritize vulnerabilities in DefectDojo
        run: |
          curl -X POST \
            -H "Authorization: Token ${{ secrets.DEFECTDOJO_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "rules": [
                {"severity": "High", "priority": "P1", "status": "Active"},
                {"severity": "Medium", "priority": "P2", "status": "Active"},
                {"severity": "Low", "priority": "P3", "status": "Active"}
              ]
            }' \
            ${{ env.NGROK_URL }}/api/v2/findings/bulk_update/
        continue-on-error: true

      # üîç Debug final: resumen
      - name: Debug Final: Verificar reportes generados
        run: |
          echo "Archivos en reportes/"
          ls -lh reportes/

          echo -e "\nVerificando tama√±os de los archivos clave:"
          for f in audit-report.json semgrep-report.sarif trivy-report.json report_json.json; do
            if [ -f "reportes/$f" ]; then
              echo "$f encontrado. Tama√±o:"
              du -h reportes/$f
            else
              echo "$f no encontrado"
            fi
          done
